// Code generated by "esc -pkg=bindata templates"; DO NOT EDIT.

package bindata

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/common.tmpl": {
		name:    "common.tmpl",
		local:   "templates/common.tmpl",
		size:    694,
		modtime: 1635919704,
		compressed: `
H4sIAAAAAAAC/3ySz2sTQRTH7/NXvKMudNPkJEQlghdBPNiC55fZx3bMzM4wMwliCLTioRYPQgNFLa2L
HjwIiyBaWqX/zP5IT/4LsptiSxOyl4Xv4/N9nxnGIB9gTDAeh2YQP0FFk0nItVI66TImlNHWg9Sqrwfh
Q/TYvZHRC0NWKEo8yvAB5+Sctu4KfY4jDIUON8gKlOIl9iV1GWsFAYMAiuPTKt2enU+Lj0fV2X559Dr/
s8+gmfVw6Le0BUcjSpogQk/QWe+sr7U7a+07DIIW69VSrPd/8y2+hSKBe+DtkG4zM+xLwYFLdA6ekhtK
/8yiMWTh7uZ9EMpIquUdXBeEMQMAaCTrL4BrioeXWav5GytGtdYmRM3t3ODykw/FXjqnuY7o7++37Vn6
tfpyejnJfpXfX5W774q946W9G96KJIaaXSi/mL6fZVl+npY72SpYkXMYL/Lz5XO58uDnxcGPpS2PdRKD
F4qcR2UWj3j2ufq0U73ZLQ+/rbIYkXWiflVLLYpplp9si2hVg7fI6VHUZZN/AQAA///4BlSutgIAAA==
`,
	},

	"/templates/demo_request.tmpl": {
		name:    "demo_request.tmpl",
		local:   "templates/demo_request.tmpl",
		size:    279,
		modtime: 1635921780,
		compressed: `
H4sIAAAAAAAC/2yPQUoDQRBF93WKWupAOsmshEEYwbUb8QCVTjlppnu6ra4JwjCbXMCV51BXnsjgMaQD
upBs34P3+YlsTx3jNJnUd3cUeJ6N8NPIWc2WQ2wAXEhRFH0Mm9ibW1Jq/jF+Tiwu8KDkzY21nHOU3AAs
qwqwwhL6fvs8fhy+Xg7H13fAE25p1F0UzLzn4QS2pIz1ql4t1vVifQVYLaEti9D+ZS/sjtyA16gy8iWk
ceOdRespZ3zILOUEToCImMTtS/FexQ0dPjrJWnRzznr6lTP8BAAA//+cpbqtFwEAAA==
`,
	},

	"/templates/demo_response.tmpl": {
		name:    "demo_response.tmpl",
		local:   "templates/demo_response.tmpl",
		size:    1190,
		modtime: 1635923028,
		compressed: `
H4sIAAAAAAAC/6yTwYrUQBCG7/0UddSwm90dRYToMsoiDuzoQW/LHiqZmmzvdLqb7sogDAMefIQ9KfgG
4lVF8GUc9DGkOzN76GTEgzmkw89fX/9UqixWC6wJVqvcLuoX2NB6nTvy1mhP+YwaUwghZGONY1CmKc0i
P0PGItHojSUnG9KMKn9SVeS9cb64Lb3GJeYtSxWqqejL59LzgDxFWwhxlGUCMghxfv+42Xz4uHn7XUDU
xtjylXHgaUk6CjNkgtHx6PjwZHR48lBAdiTGIbMY3wa7U12h1PAY2LV0V9i2VLKCSqH38JyUMrASAADx
4vBk8Iqd1DVsPn/dfLupzc8vn369f+ejuLUcxdM6uQwJtv65dJ5DX4v/BFS4hzfRTDW5BCg13xsN8nZ+
nmjuwc5NL5rU/OD+ICmaObx7nLkyyAkoantCdX5+Fo4ebGbaUtEQbU+wbQGfxbPHe2qMItQJsDRGDdJ2
dg4fPViY64TEsqH8tWxoEBcLuFuHtPvSp027uJSah7svPT/a/sxT4G6REuAUbcJr0F5IzZd/Gbgp2h33
oBu+U+C4kP9E78ghNrk5VrRa772lox+8LK+p4u6Sya6sEGvxJwAA//9CBDOypgQAAA==
`,
	},

	"/templates/demo_service.tmpl": {
		name:    "demo_service.tmpl",
		local:   "templates/demo_service.tmpl",
		size:    571,
		modtime: 1635922070,
		compressed: `
H4sIAAAAAAAC/3yRPU8yQRCA+/0VU8Ll5fio3uQMIcbCykJirJdjgAv75ewuDaGwI9pYGBsLQ0JBp4WJ
CYX+GTz8GeYOiOGCXjO5ZyYzz+wYHg95H2E8Ds2wf8YlTiahRRolMUaMJdJocvtZwiuP1oVdlDq8sEgZ
j34ptUYri5vaUxRCHy6MtZRahedovXCXxI1BihirBgGDANbz5er9dmvFIGct7t1AE1gcocpBlzuERq1R
q9Qblfp/BkGVGd8RSQyJckg9HiOcoNTtTSMYMwCAfEb27QK0DCcuoZeQdZlfgQtewITOk9r+VvO4t8hR
vngTBlkotR0lqv/T/d8W7NqWo4IWpI+v6cPL+n6RTt9WH7P0+rlg5C0SHMxv1KCjtQBHHr9mi/V8mU7v
Pm+e/hA+1logV03wJnvV7Mil3aXzaeWITb4DAAD//5YJipU7AgAA
`,
	},

	"/templates/gitignore.tmpl": {
		name:    "gitignore.tmpl",
		local:   "templates/gitignore.tmpl",
		size:    140,
		modtime: 1635911917,
		compressed: `
H4sIAAAAAAAC/xTMsRGDMAxG4f4fhUJeIhswQE4YBRwE8km6I2kye87F+8pH3e0tNUEhme3aAlSVIzrn
DmqrMJJ9k8RE7dRh9+EdWKWrfSl2THSzYzTRwgfUxugxP+c0F5TwWk5uV+lur6YSRa2yFrVt4XrQ51T8
/gEAAP//C86lQowAAAA=
`,
	},

	"/templates/iml.tmpl": {
		name:    "iml.tmpl",
		local:   "templates/iml.tmpl",
		size:    80,
		modtime: 1635912841,
		compressed: `
H4sIAAAAAAAC/7Kxr8jNUShLLSrOzM+zVTLUM1BSSM1Lzk/JzEu3VQoNcdO1ULK347LJzU8pzUlVKKks
SLVV8nIMc4z39XcJ9XFVQug1UVLQtwMEAAD//6RnInpQAAAA
`,
	},

	"/templates/pom.tmpl": {
		name:    "pom.tmpl",
		local:   "templates/pom.tmpl",
		size:    2101,
		modtime: 1635912635,
		compressed: `
H4sIAAAAAAAC/7xU3WrjPBC9z1ME891GStryEYqqUti/Qv+g3WVvVXnqqGtLRpKTLKHvvkSSbdmxU8rC
5ipz5ozm+MxI5HJb5NM1aCOUvEgWaJ5MQXKVCpldJN+fvsyWySWdkFKrV+B2ui1yaS6SlbXlOcYFW4NE
rGR8BUjpDD/c3+IzNEfzZDKtf67kfGtEU7bZbNDm1BWczOcL/PP25pGvoGAzIY1lkkNcbsS5cdkbxZl1
Mt9tPx1jbE3qwZnjoa1JE+qakZJpkJY2nUmmVVVep5SrAlmmnpkiuMZaFtNWvDBur1PqTyA4glpe8Jie
7PsSXIe+N66b+7BQKeQ/AuPMF3SwSUfgboe+ur+f3t56EmN5ux26qiPH7OtsNC72LWePd1cPj9/unyKx
wSmtStBWgIm+75WtGWoPWBLcQVpiWCX0XIk8RUZVmsPnsHLUbRzBRzm1ZZEKD6VQgkxB8q6yBv7dgh3/
lM5Q6Jir4ln9Gphz38yaODTrnpeLJVr835t4QzNclUBLrdYihZRgH7ficV99hESf7oyKyl6EZPkdK+Bw
6m0qmkleZUKanjaPdsED48Ll8jctnDPiX99DfxG5KkqRg5754nFLO7aeoiVajJjqiFzJF5FV2j0Zh3lv
vlss+t8uXtU3ggM+XGSZzsAeFgV8uAh6Cw6dZe5Q8RHlBA/N5B8Nyrvy0TGd/P2YmLWMr6jVFRAcgo/5
5mewBV7tc2ZsSDVhOO+tXjEDNOwswT4cp2eK5WY833DoK9MEu3/jh+EjpxF8RH2UNO8tVI2Y+rkJT8uk
eZXpnwAAAP//w7Q1gDUIAAA=
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates": {
		_escData["/templates/common.tmpl"],
		_escData["/templates/demo_request.tmpl"],
		_escData["/templates/demo_response.tmpl"],
		_escData["/templates/demo_service.tmpl"],
		_escData["/templates/gitignore.tmpl"],
		_escData["/templates/iml.tmpl"],
		_escData["/templates/pom.tmpl"],
	},
}
